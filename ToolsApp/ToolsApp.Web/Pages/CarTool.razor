@page "/car-tool"

@using System.Threading.Tasks;
@using ToolsApp.Models.Cars
@using ToolsApp.Components.CarTool
@using ToolsApp.Services.Cars

@inject CarToolStoreService carToolStore

@*<ToolHeader HeaderText="Car Tool" />
*@<CarTable Cars="@cars" EditCarId="@editCarId"
	OnEditCar="editCar" OnDeleteCar="removeCar"
	OnSaveCar="replaceCar" OnCancelCar="cancelCar" />
<CarForm ButtonText="Add Car" OnSubmitCar="appendCar" />

@code {

	private IEnumerable<Car> cars = new List<Car>();

	protected override async Task OnInitializedAsync()
	{
		cars = await carToolStore.Cars();
	}

	private int editCarId {
		get {
			return carToolStore.EditCarId;
		}
	}

	private void editCar(int carId) {
		carToolStore.StartEditMode(carId);
	}

	private void cancelCar() {
		carToolStore.CancelEditMode();
	}

	private async Task appendCar(NewCar car)
	{
		cars = await (await carToolStore.AddCar(car)).Cars();
	}

	private async Task replaceCar(Car car)
	{
		cars = await (await carToolStore.SaveCar(car)).Cars();
	}

	private async Task removeCar(int carId)
	{
		cars = await (await carToolStore.DeleteCar(carId)).Cars();
	}

}
