@page "/car-tool"

@using System.Threading.Tasks;
@using ToolsApp.Models.Cars
@using ToolsApp.Components.CarTool
@using ToolsApp.Services.Cars
@using ToolsApp.Services.Shared
@using ToolsApp.Models.Shared

@inject CarToolStoreService carToolStore
@inject ScreenBlockerService screenBlocker
@inject IJSRuntime JS

<ToolHeader HeaderText="@_headerText" />
<CarTable Cars="@cars" EditCarId="@editCarId"
	OnEditCar="editCar" OnDeleteCar="removeCar"
	OnSaveCar="replaceCar" OnCancelCar="cancelCar" />
<CarForm ButtonText="Add Car" OnSubmitCar="appendCar" />

@code {

	private RefreshCarsInvokeHelper? refreshCarsInvokeHelper;
	private bool showBlocker = false;

	private IEnumerable<Car> cars {
		get {
			return carToolStore.Cars;
		}
	}

	private HeaderInfo _headerText = new HeaderInfo()
		{
			HeaderText = "Car Tool",
			SubHeaderText = "The best way to manage cars!",
		};

	private int editCarId {
		get {
			return carToolStore.EditCarId;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		if (showBlocker) await screenBlocker.BlockScreen();
		await carToolStore.RefreshCars();
		if (showBlocker) await screenBlocker.UnblockScreen();

		refreshCarsInvokeHelper = new RefreshCarsInvokeHelper(DoRefreshCars);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		showBlocker = true;

		if (refreshCarsInvokeHelper is not null)
		{
			await JS.InvokeVoidAsync("refreshCarsCaller",
				DotNetObjectReference.Create(refreshCarsInvokeHelper));
		}
	}

	private void editCar(int carId) {
		carToolStore.StartEditMode(carId);
	}

	private void cancelCar() {
		carToolStore.CancelEditMode();
	}

	private async Task appendCar(NewCar car)
	{
		await screenBlocker.BlockScreen();
		await carToolStore.AddCar(car);
		await screenBlocker.UnblockScreen();
	}

	private async Task replaceCar(Car car)
	{
		await screenBlocker.BlockScreen();
		await carToolStore.SaveCar(car);
		await screenBlocker.UnblockScreen();
	}

	private async Task removeCar(int carId)
	{
		await screenBlocker.BlockScreen();
		await carToolStore.DeleteCar(carId);
		await screenBlocker.UnblockScreen();
	}

	private void DoRefreshCars()
	{
		carToolStore.RefreshCars();
		StateHasChanged();
  }

	public class RefreshCarsInvokeHelper
	{
		private Action action;

		public RefreshCarsInvokeHelper(Action action)
		{
				this.action = action;
		}

		[JSInvokable("ToolsApp")]
		public void RefreshCarsCaller()
		{
				action.Invoke();
		}
	}

}
